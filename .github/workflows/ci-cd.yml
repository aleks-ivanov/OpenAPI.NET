name: OpenAPI.NET CI/CD Pipeline

on: [push, pull_request, workflow_dispatch]

jobs:
  ci:
    name: Continuous integration
    runs-on: windows-latest
    outputs:
      latest-version: ${{ steps.get_semantic_version.outputs.version_num }}
    env:
      ARTIFACTS_FOLDER: ${{ github.workspace }}\Artifacts
      GITHUB_RUN_NUMBER: ${{ github.run_number }}
    steps:
      # - name: Steps' conditionals handler
      #   id: step_conditionals_handler
      #   shell: pwsh
      #   run: |
      #     $IS_CONFIGURATION_DEBUG = 'false'
      #     $IS_CONFIGURATION_RELEASE = 'false'
      #     $IS_PUSH_TO_MASTER = 'false'
      #     $IS_NOT_PR = 'true'
      #     $IS_GITHUB_RELEASE = 'false'
      #     $IS_WINDOWS = 'false'
      #     $IS_UBUNTU = 'false'

      #     if ( $env:BUILD_CONFIGURATION -ceq 'Debug' ) {
      #       $IS_CONFIGURATION_DEBUG = 'true'
      #     }
      #     if ( $env:BUILD_CONFIGURATION -ceq 'Release' ) {
      #       $IS_CONFIGURATION_RELEASE = 'true'
      #     }
      #     if ( ($env:GITHUB_EVENT_NAME -ceq 'push') -and ($env:GITHUB_REF -ceq 'refs/heads/master') ) {
      #       $IS_PUSH_TO_MASTER = 'true'
      #     }
      #     if ( $env:GITHUB_EVENT_NAME -ceq 'pull_request' ) {
      #       $IS_NOT_PR = 'false'
      #     }
      #     if ( ($env:GITHUB_EVENT_NAME -ceq 'push') -and ($env:GITHUB_REF -ceq 'refs/heads/master') -and ($env:BUILD_CONFIGURATION -ceq 'Release') -and ( $env:OS -ceq 'windows-latest' ) ) {
      #       $IS_GITHUB_RELEASE = 'true'
      #     }
      #     if ( $env:OS -ceq 'windows-latest' ) {
      #       $IS_WINDOWS = 'true'
      #     }
      #     if ( $env:OS -ceq 'ubuntu-latest' ) {
      #       $IS_UBUNTU = 'true'
      #     }

      #     echo "::set-output name=is_configuration_debug::$(echo $IS_CONFIGURATION_DEBUG)"
      #     echo "::set-output name=is_configuration_release::$(echo $IS_CONFIGURATION_RELEASE)"
      #     echo "::set-output name=is_push_to_master::$(echo $IS_PUSH_TO_MASTER)"
      #     echo "::set-output name=is_not_pr::$(echo $IS_NOT_PR)"
      #     echo "::set-output name=is_github_release::$(echo $IS_GITHUB_RELEASE)"
      #     echo "::set-output name=is_windows::$(echo $IS_WINDOWS)"
      #     echo "::set-output name=is_ubuntu::$(echo $IS_UBUNTU)"
      #   env:
      #     GITHUB_EVENT_NAME: ${{ github.event_name }}
      #     GITHUB_REF: ${{ github.ref }}
      #     OS: ${{ matrix.os }}

      - name: Checkout repository
        id: checkout_repo
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      # - name: Get semantic version from csproj
      #   id: get_semantic_version
      #   shell: pwsh
      #   run: |
      #     $xml = [xml](gc MimeKit/MimeKit.csproj)
      #     $SEMANTIC_VERSION_NUMBER = $xml.Project.PropertyGroup.VersionPrefix
      #     echo "::set-output name=version_num::$(echo $SEMANTIC_VERSION_NUMBER[0].Trim())"
      #     echo "::set-output name=version_tag::$(echo v"$SEMANTIC_VERSION_NUMBER[0].Trim()")"

      # - if: steps.step_conditionals_handler.outputs.is_github_release == 'true'
      #   name: Get latest tag
      #   id: get_latest_tag
      #   shell: pwsh
      #   run: |
      #     $LATEST_TAG = git -c 'versionsort.suffix=-' ls-remote --exit-code --refs --sort='version:refname' --tags "https://github.com/$env:GIT_URL.git" '*.*.*' | tail --lines=1 | cut --delimiter='/' --fields=3
      #     echo "::set-output name=tag::$(echo $LATEST_TAG)"
      #   env:
      #     GIT_URL: ${{ github.repository }}
          
      # - if: steps.step_conditionals_handler.outputs.is_github_release == 'true' && steps.get_semantic_version.outputs.version_tag != steps.get_latest_tag.outputs.tag
      #   name: Add new tag to repo
      #   id: add_new_tag_to_repo
      #   shell: pwsh
      #   run: |
      #     git config --global user.name $env:GIT_USER_NAME
      #     git config --global user.email $env:GIT_USER_EMAIL
      #     git tag -a -m "Tagged for $env:NEW_VERSION_NUM" $env:NEW_VERSION_NUM
      #     git push --follow-tags
      #   env:
      #     GIT_USER_NAME: ${{ github.event.head_commit.author.username }}
      #     GIT_USER_EMAIL: ${{ github.event.head_commit.author.email }}
      #     NEW_VERSION_NUM: ${{ steps.get_semantic_version.outputs.version_num }}

      - name: Build projects
        id: build_projects
        shell: pwsh
        run: |
          $projectsArray = @(
            '.\src\Microsoft.OpenApi\Microsoft.OpenApi.csproj',
            '.\src\Microsoft.OpenApi.Readers\Microsoft.OpenApi.Readers.csproj',
            '.\src\Microsoft.OpenApi.Tool\Microsoft.OpenApi.Tool.csproj'
          )

          $projectsArray | ForEach-Object {
            dotnet build $PSItem `
            /t:build `
            /p:Configuration=Release `
            /p:OutputPath=$env:ARTIFACTS_FOLDER
          }

          Push-Location Artifacts/
          New-Item NuGet -ItemType Directory
          Get-ChildItem *.nupkg -recurse | Move-Item -destination "NuGet"

      - name: Run unit tests
        id: run_unit_tests
        shell: pwsh
        run: |
          $testProjectsArray = @(
            '.\test\Microsoft.OpenApi.Tests\Microsoft.OpenApi.Tests.csproj',
            '.\test\Microsoft.OpenApi.Readers.Tests\Microsoft.OpenApi.Readers.Tests.csproj',
            '.\test\Microsoft.OpenApi.SmokeTests\Microsoft.OpenApi.SmokeTests.csproj'
          )

          $testProjectsArray | ForEach-Object {
            dotnet test $PSItem --configuration Release
          }

      - name: Upload NuGet packages as artifacts
        id: upload_nuget_pckgs
        uses: actions/upload-artifact@v1
        with:
          name: NuGet packages
          path: Artifacts\NuGet\

      # - name: Push NuGet packages to NuGet.org
      #   id: push_nuget_packages
      #   shell: pwsh
      #   run: |
      #     Push-Location Artifacts/NuGet/
      #     Get-ChildItem *.nupkg -recurse | ForEach-Object {
      #       nuget push $PSItem `
      #       -ApiKey $env:NUGET_API_KEY `
      #       -Source https://api.nuget.org/v3/index.json
      #     }
      #   env:
      #     NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}

      # - if: steps.step_conditionals_handler.outputs.is_github_release == 'true'
      #   name: Upload NuGet package as artifact
      #   id: upload_nuget_package
      #   uses: actions/upload-artifact@v1
      #   with:
      #     name: MimeKit.${{ steps.get_semantic_version.outputs.version_num }}.${{ env.GITHUB_RUN_NUMBER }}.nupkg
      #     path: MimeKit.${{ steps.get_semantic_version.outputs.version_num }}.${{ env.GITHUB_RUN_NUMBER }}.nupkg

# Built with ‚ù§ by [Pipeline Foundation](https://pipeline.foundation)